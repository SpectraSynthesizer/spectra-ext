/*
Copyright (c) since 2015, Tel Aviv University and Software Modeling Lab

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Tel Aviv University and Software Modeling Lab nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Tel Aviv University and Software Modeling Lab 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
*/

package tau.smlab.syntech.ctd;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.NoSuchElementException;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;

import net.sf.javabdd.BDD;

public class CTDExecutorRestarting extends CTDExecutor{

	protected ArrayList<DefaultMutableTreeNode> leaves;
	protected int currentLeaf;
	protected DefaultMutableTreeNode[] currentPath;
	protected int currentPathIndex;
	
	/**
	 * A class representing an executor of a CTD test suite.
	 * This "restarting" executor will start each test at an initial position.
	 * As a result of the "restarting", some positions could be revisited.
	 * Use wasVisited() for checking if a state was visited before in a previous test.
	 * @param outFolder The "out" folder containing the symbolic controller of the specification to be tested.
	 * @param treeFilePath The ".spectra_tree" file generated by computing a CTD test suite.
	 * @param bddsFolder The folder containing the BDDs computed by a CTD test suite.
	 * @param reordering Should reordering be enabled?
	 * @param useJitController Use a JIT controller or a static controller
	 * @throws ClassNotFoundException If there was an error parsing one of the files.
	 * @throws IOException If a file could not be read.
	 */
	public CTDExecutorRestarting(String outFolder, String name, String treeFilePath, String bddsFolder, boolean reordering, boolean useJitControllere)
			throws ClassNotFoundException, IOException {
		super(outFolder, name, treeFilePath, bddsFolder, reordering, useJitControllere);
		
		this.leaves = new ArrayList<>();
		add_leaves((DefaultMutableTreeNode) this.statesTree.getRoot());
		
		this.currentLeaf = 0;
		update_path();
		this.jumped = true;
		updateCurrent();
	}
	
	private void update_path() {
		TreeNode[] tempArr = leaves.get(currentLeaf).getPath();
		this.currentPath = Arrays.copyOf(tempArr, tempArr.length, DefaultMutableTreeNode[].class);
		this.currentPathIndex = 1;
		this.currentNode = this.currentPath[1];
	}
	
	private void add_leaves(DefaultMutableTreeNode node) {
		if (node.isLeaf()) {
			this.leaves.add(node);
			return;
		}
		
		for (int i=0; i<node.getChildCount(); i++) {
			DefaultMutableTreeNode child = (DefaultMutableTreeNode)(node.getChildAt(i));
			add_leaves(child);
		}
	}

	@Override
	public BDD getNext() {
		lastVisited = true;
		if (currentNode.isLeaf()) {
			if (this.currentLeaf == leaves.size()-1) {
				throw new NoSuchElementException();
			}
			
			this.currentLeaf++;
			update_path();
			
			jumped = true;
			testNumber++;
			stateNumber=1;
		} else {
			this.currentPathIndex++;
			this.currentNode = this.currentPath[this.currentPathIndex];
			
			jumped = false;
			stateNumber++;
		}
		
		BDD cur = updateCurrent();
		
		return cur;
	}

	private BDD updateCurrent() {
		BDD cur = (BDD)(currentNode.getUserObject());
		if (!visited.contains(currentNode)) {
			visited.add(currentNode);
			lastVisited = false;
		}
		return cur;
	}

}
