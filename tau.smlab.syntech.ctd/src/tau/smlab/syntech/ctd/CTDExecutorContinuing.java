/*
Copyright (c) since 2015, Tel Aviv University and Software Modeling Lab

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Tel Aviv University and Software Modeling Lab nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Tel Aviv University and Software Modeling Lab 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
*/

package tau.smlab.syntech.ctd;

import java.io.IOException;
import java.util.HashSet;
import java.util.NoSuchElementException;
import java.util.Set;

import javax.swing.tree.DefaultMutableTreeNode;

import net.sf.javabdd.BDD;

public class CTDExecutorContinuing extends CTDExecutor{
	// TODO change completed to be location based and not hash based
	protected Set<DefaultMutableTreeNode> completed;
	
	/**
	 * A class representing an executor of a CTD test suite.
	 * This "non-restarting" executor will start each test from the last visited state in the test,
	 * even if it isn't an initial position.
	 * Use isEndOfTest() and wasJumped() in order to know that a test in ending and that a jump has occurred respectively.
	 * @param outFolder The "out" folder containing the symbolic controller of the specification to be tested.
	 * @param treeFilePath The ".spectra_tree" file generated by computing a CTD test suite.
	 * @param bddsFolder The folder containing the BDDs computed by a CTD test suite.
	 * @param reordering Should reordering be enabled?
	 * @param useJitController Use a JIT controller or a static controller
	 * @throws ClassNotFoundException If there was an error parsing one of the files.
	 * @throws IOException If a file could not be read.
	 */
	public CTDExecutorContinuing(String outFolder, String name, String treeFilePath, String bddsFolder, boolean reordering, boolean useJitController)
			throws ClassNotFoundException, IOException {
		super(outFolder, name, treeFilePath, bddsFolder, reordering, useJitController);
		completed = new HashSet<DefaultMutableTreeNode>();
		getNext();
		jumped=true;
		lastVisited=false;
	}
	
	private boolean advanceStateDownwards(DefaultMutableTreeNode node) {
		if (node.getUserObject() != null) {
			if (!visited.contains(node)) {
				currentNode = node;
				visited.add(node);
				lastVisited = false;
				return true;
			}
			
			if (completed.contains(node)) {
				return false;
			}
			
			for (int i=0; i<node.getChildCount(); i++) {
				DefaultMutableTreeNode child = (DefaultMutableTreeNode)(node.getChildAt(i));
				if (advanceStateDownwards(child)) {
					return true;
				}
			}
			
			completed.add(node);
			return false;
		}
		else {
			for (int i=0; i<node.getChildCount(); i++) {
				DefaultMutableTreeNode child = (DefaultMutableTreeNode)(node.getChildAt(i));
				if (advanceStateDownwards(child)) {
					return true;
				}
			}
			
			throw new NoSuchElementException();
		}
	}
	
	private boolean isCompletedNode(DefaultMutableTreeNode node) {
		for (int i=0; i<node.getChildCount(); i++) {
			DefaultMutableTreeNode child = (DefaultMutableTreeNode)(node.getChildAt(i));
			if (!completed.contains(child)) {
				return false;
			}
		}
		
		return true;
	}
	
	public BDD getNext() {
		jumped = false;
		lastVisited = true;
		if (!advanceStateDownwards(currentNode)) {
			jumped = true;
			
			while (isCompletedNode(currentNode)) {
				// In some flows a node could be added twice to completed. But because this is a set, it isn't a problem.
				completed.add(currentNode);
				
				currentNode = (DefaultMutableTreeNode)(currentNode.getParent());
				if (currentNode.getUserObject() == null) {
					advanceStateDownwards(currentNode);
					break;
				}
			}
			
			testNumber++;
			stateNumber=1;
		}
		else {
			stateNumber++;
		}
		
		return getCurrentState();
	}

}
